<?php

namespace _mynamespace_;
use Code_Alchemy\Applications\Web_Director\Model_Hierarchy;
use Code_Alchemy\Applications\Web_Director\Services_Fetcher;
use Code_Alchemy\Authority\Site_Authority;
use Code_Alchemy\Controllers\Application_Controller;
use Code_Alchemy\Core\Code_Alchemy_Framework;
use Code_Alchemy\Core\Configuration_File;
use Code_Alchemy\Core\Random_Password;
use Code_Alchemy\Creators\Database_Table_Creator;
use Code_Alchemy\Creators\Server_Model_Creator;
use Code_Alchemy\Database\Database;
use Code_Alchemy\Database\Table\Database_Table;
use Code_Alchemy\Email\Email_Messenger;
use Code_Alchemy\helpers\sql_types;
use Code_Alchemy\JSON\Displayed_JSON_Output;
use Code_Alchemy\Models\Dynamic_Model;
use Code_Alchemy\Models\Factories\Factory_Wrapper;
use Code_Alchemy\Models\Factories\Model_Factory;
use Code_Alchemy\Models\Helpers\Columns_For;
use Code_Alchemy\Models\Helpers\Dynamic_Model_Fields_Fetcher;
use Code_Alchemy\Models\Helpers\Fields_Fetcher;
use Code_Alchemy\Models\Helpers\Model_Class_Verifier;
use Code_Alchemy\Models\Helpers\Model_Factory_For;
use Code_Alchemy\Models\Helpers\Reference_Column_For;
use Code_Alchemy\Models\Key_Column;
use Code_Alchemy\Models\Model;
use Code_Alchemy\Models\Model_Configuration;
use Code_Alchemy\Security\Officer;
use Code_Alchemy\core\application_state;
use Code_Alchemy\helpers\plural_for;
use Code_Alchemy\models\model_wrapper;
use Code_Alchemy\tools\code_tag;
use Code_Alchemy\tools\installer;
use Code_Alchemy\Vendors\Twitter\Bloodhound_Search;

/**
 * Class parnassus_controller
 * @package _mynamespace_
 *
 * !!! DO NOT EDIT THIS FILE !!!
 *
 * This file will be overwritten with each subsequent release of Web Director
 *
 */
class parnassus_controller extends Application_Controller {

    /**
     * @var string version number for console
     */
    public $version = "2.1.1";

    /**
     * @var bool if true, log to Firebug
     */
    private $firebug = false;

    /**
     * @var array Configuration for the panel
     */
    private $configuration = array();

    /**
     * Default action is called on a plain URI "/"
     */
    public function default_action(){

        // Handle login state
        $this->handle_login_state();

        /**
         * Set the State, based on the page view
         */
        $this->state = new application_state();

        /**
         * Use the bootstrap layout by default
         */
        $this->layout = $this->get_layout();

        // Data
        $this->data = $this->get_data();

        /**
         * Render the page.  Locally set variables will be available via $this->
         */
        $this->render('home');

	}

    /**
     * @return string Layout to use for view
     */
    private function get_layout(){

        $layout = 'parnassus-search';

        switch( $this->uri()->part(2) ){

            case 'classic':

                $layout = 'parnassus';

            break;

            case 'view':

                $layout = 'parnassus-view-record';

            break;

            case 'list_of':

                $layout = 'parnassus-list-of-models';

            break;

            case 'edit_image':

                $layout = 'parnassus-edit-image';

            break;

            case 'multi-add':

                $layout = 'code-alchemy-multi-add';

            break;

            case 'add':

                $layout = 'parnassus-add-model';

            break;

            case 'models':

                if ( $this->uri()->part(5)=='edit')

                    $layout = 'parnassus-edit-model';

            break;
        }

        if ( $this->firebug ) \FB::log("layout=".$layout);

        return $layout;
    }

    /**
     * Add a new Model
     */
    public function add(){

        // Handle login state
        $this->handle_login_state();

        $this->state = new application_state();

        /**
         * Use the bootstrap layout by default
         */
        $this->layout = $this->get_layout();

        $model_name = $this->uri()->part(3);

        // Get Data
        $this->data = $this->get_data();

        /**
         * Render the page.  Locally set variables will be available via $this->
         */
        $this->render('home');

    }

    /**
     * List Models for management
     */
    public function list_of(){

        // Handle login state
        $this->handle_login_state();

        $this->state = new application_state();

        /**
         * Use the bootstrap layout by default
         */
        $this->layout = $this->get_layout();

        $model_name = $this->uri()->part(3);

        // Get Data
        $this->data = $this->get_data();

        /**
         * Render the page.  Locally set variables will be available via $this->
         */
        $this->render('home');

    }

    /**
     * @return array of services
     */
    private function fetch_services(){


        // For certain views, we don't need the services
        if ( in_array( $this->uri()->part(2),array('models') ) )

            return array();

        else return (new Services_Fetcher( $this->configuration ))->as_array();

    }

    /**
     * @return array of Data for View
     */
    public function fetch_data(){

        $this->load_configuration();

        // Handle login state
        $this->handle_login_state();

        $data = $this->fetch_services();

        header('Content-Type: application/json');

        echo json_encode($data);

    }

    /**
     * Fetch a list of models
     */
    public function fetch_list_of(){

        // Handle login state
        $this->handle_login_state();

        $model_class = \x_objects::instance()->configuration()->appname. "\\models\\".$this->uri()->part(3);

        $model = new Factory_Wrapper($model_class::factory() );

        $models = $model->model()->fetch_all_undeleted_as_array("LIMIT 50");

        header('Content-Type: application/json');

        echo json_encode($models);

    }

    public function models(){

        // Handle login state
        $this->handle_login_state();

        // Process posted data
        $this->process_posted_data();

        $this->state = new application_state();

        $this->data = $this->get_data();

        /**
         * Use the bootstrap layout by default
         */
        $this->layout = $this->get_layout();

        /**
         * Render the page.  Locally set variables will be available via $this->
         */
        $this->render('home');


    }

    /**
     * Process any posted form data
     */
    private function process_posted_data(){

        if ( isset( $_REQUEST['update_from_associative'])){

            $data = $_POST;

            if ( $this->firebug ) \FB::log($data);

            $class = (string) new \Code_Alchemy\Models\Helpers\Model_Class_For($data['model_name']);

            $is_dynamic = (new Model_Class_Verifier($class))->is_dynamic_model();

            $search = (new Key_Column($data['model_name']))."='" . $data['model_id'] . "'";

            $model = $is_dynamic ?

                (new Dynamic_Model($data['model_name']))->find($search):

                    new $class($search);

            if ( $model->exists ){

                $_REQUEST['update_result'] = $is_dynamic ?

                    $model->update($data)->put():

                        $model->update_from_associative($data)?'success':'error';

                // If successful
                if ( $_REQUEST['update_result'] =='success'){

                    // Go back to list view
                    header('Location: /parnassus/list_of/'.$data['model_name']."/1/25?edited=".$model->id());


                } else {

                }

            }





        }

    }

    /**
     * Fetch all as array
     */
    public function foreign_table_options(){

        header('Content-Type: application/json');

        $model_class = (string) new \Code_Alchemy\Models\Helpers\Model_Class_For($this->uri()->part(3));

        $model = $this->get_model( $model_class::factory() );

        echo json_encode( $model->fetch_all_as_array() );

    }

    /**
     * @param Model_Factory $model
     * @return Model_Factory
     */
    private function get_model( Model_Factory $model = null ){

        if ( $model ) return $model;

        else return (new Model_Factory_For($this->uri()->part(3)))->factory();
    }

    /**
     * Handle the login state
     */
    private function handle_login_state(){

        // If not admin
        if ( ! (new Site_Authority())->is_administrative_user() )

            // Call redirect handler
        $this->redirect_handler();

    }

    /**
     * Load Configuration
     */
    private function load_configuration(){

        $tag = new code_tag(__FILE__,__LINE__,get_class(),__FUNCTION__);


        // Get database
        $database = new Database();

        // If configuration table doesn't exist
        if ( ! $database->has_table('parnassus_configuration'))

            // Create it
            (new Server_Model_Creator('parnassus_configuration','configuration'))

                ->create(false);

            $model = (new Model('parnassus_configuration'))->find("name='admin-console'");

            if ( ! $model->exists )

                $model->create_from(array(
                    'name'=>'admin-console',
                    'data'=> serialize( array() )
                ));

            $this->configuration = unserialize($model->data);


        $this->configuration = unserialize((new Model('parnassus_configuration'))->find("name='admin-console'")->data);

        if ( $this->firebug ) {

            \FB::log("$tag->firebug_format: Configuration appears below");

            \FB::log($this->configuration);

        }


    }

    /**
     * @return array of Data
     */
    private function get_data(){

        $codeAlchemy_View = $this->uri()->part(2);

        $tag = new code_tag(__FILE__,__LINE__,get_class(),__FUNCTION__);

        // Load the configuration
        $this->load_configuration();


        $data = array(

            'services'=> $this->fetch_services(),

            'configuration'=>$this->configuration,

            'lang'=>(string) Code_Alchemy_Framework::instance()->configuration()->language

        );

        if ( isset( $_GET['added']))

            $data['new_model_id'] = 2;


        switch ($codeAlchemy_View){

            case 'view':

                $model_name = $this->uri()->part(3);

                $id = $this->uri()->part(4);

                $data['oRecord'] = (new Model($model_name))

                    ->find((new Key_Column($model_name))."='$id'");

                $data['aRecord'] = $data['oRecord']->as_array();

            break;

            case '':
            case 'classic':

                $sql_types = new sql_types();

                $data['service_types'] = $sql_types->as_array();

                $data['service_labels'] = $this->service_labels($data['services']);


                break;

            case 'models':

                $id_candidate = $this->uri()->part(4);

                if ( $id_candidate ){

                    $model_name = $this->uri()->part(3);

                    $model_class = (string) new \Code_Alchemy\Models\Helpers\Model_Class_For($model_name);

                    if ( $model_class) {

                        $is_dynamic = (new Model_Class_Verifier($model_class))->is_dynamic_model();

                        $model = $is_dynamic ?

                            (new Dynamic_Model($model_name))->find((new Key_Column($model_name))."='$id_candidate'"):

                                new $model_class((new Key_Column($model_name))."='$id_candidate'");

                        $data['model'] = $model->as_array();

                        $fetcher = $is_dynamic ?

                            new Dynamic_Model_Fields_Fetcher($model):

                                new model_fields_fetcher( $model );

                        $data['fields'] = $fetcher->as_array();

                        $data['intersections'] = array();

                        $isections = $is_dynamic?

                            $model->intersections() :

                                $model->source()->intersections();

                        $data['referenced_by'] = $is_dynamic ?

                            $model->referenced_by() :

                                $model->source()->referenced_by();

                        // If we have at lease one referecing model
                        if ( count( $data['referenced_by']))

                            // For each one
                        foreach( $data['referenced_by'] as $ref ){

                            $model_name2 = $ref;

                            if ( $model_name2 ){

                                $model_class2 = (string) new \Code_Alchemy\Models\Helpers\Model_Class_For($model_name2);

                                $model2 = new Factory_Wrapper($model_class2::factory());

                                $query = $model_name . "_id='$id_candidate'";

                                $data['referenced_by_'.$ref ] = $model2->model()->find_all_undeleted($query);


                            }

                        }

                        if ( count($isections)){

                            foreach ($isections as $isect ){

                                $isect_class = (string ) new \Code_Alchemy\Models\Helpers\Model_Class_For($isect);

                                $is_dynamic = (new Model_Class_Verifier($isect_class));

                                $model_wrapper = new model_wrapper( $isect_class::factory() );

                                $source_id = $model_name."_id";


                                $id = $model->id;

                                //\FB::log($source_id."=".$id);

                                $data['intersections'][$isect] = array(
                                    'display_name'=>isset( $this->configuration[$isect]['service_label'])?$this->configuration[$isect]['service_label']: ucfirst(implode(' ',explode('_',$isect))),
                                    'records'=> $model_wrapper->model()->fetch_all_undeleted_as_array("$source_id='$id'",true)
                                );

                            }

                        }


                    }

                }

            break;

            case 'list_of':

                // Set data from local method
                $data = $this->set_list_of_data( $data );

                $fetcher =

                    new Dynamic_Model_Fields_Fetcher( new Dynamic_Model($this->uri()->part(3)));

                $data['fields'] = $fetcher->as_array();



                break;

            case 'multi-add':

                $data['add-qty'] = 10;

                $model_config = (new Model_Configuration())->model_for( $this->uri()->part(3));

                // Get the Model Class
                $model = $this->get_model();

                $fields = $model->fetch_fields();

                $data['intersections'] = $model->intersections();

                // remove hidden fields
                $hidden_fields = $this->configuration[$this->uri()->part(3)]['add_hidden_fields'];

                if ( isset($hidden_fields))

                    foreach( $hidden_fields as $hidden )

                        unset($fields[$hidden]);

                $data['fields'] = $fields;

                // Set common fields
                $data['common_fields'] = array();

                // Set unique fields

                $data['unique_fields'] = array();


                foreach ( $fields as $field )

                    if ( in_array($field->name,$model_config['multi-add']['common']))

                        $data['common_fields'][] = $field;

                    else

                        $data['unique_fields'][] = $field;


                break;

            case 'add':

                // For copy
                $copied_id = $this->uri()->part(4);

                $data['copied'] = (new Model($this->uri()->part(3)))

                    ->find((new Key_Column($model_name))."='$copied_id'");

                // Get the Model Class
                $model = $this->get_model();

                $fields = $model->fetch_fields();

                $data['intersections'] = $model->intersections();

                // remove hidden fields
                $hidden_fields = $this->configuration[$this->uri()->part(3)]['add_hidden_fields'];

                if ( isset($hidden_fields))

                    foreach( $hidden_fields as $hidden )

                        unset($fields[$hidden]);

                $data['fields'] = $fields;

                // Was data submitted
                if ( isset( $_POST['new_model_submitted'])){

                    $object = $model->create_from_associative($_POST);

                    if ( $object && $object->exists ){

                        $data['new_model_id']=$object->id;

                        // Go back to list
                       header('Location: /parnassus/list_of/'.$this->uri()->part(3)."/1/25?added=$object->id");

                    } else {

                        $data['error'] = $model->last_error;
                    }


                }


            break;

            default:

            break;


        }


        return $data;

    }


    /**
     * @param array $services
     * @return array of Service Labels
     */
    private function service_labels( array $services ){

        $labels = array();

        foreach ( $services as $service)

            $labels[ $service['table_name'] ] = $service['service_label'];

        return $labels;
    }

    /**
     * @param array $data to seed operation
     * @return array of data for client
     */
    private function set_list_of_data( array $data ){

        $model_key = $this->uri()->part(3);

        $data['custom_actions'] = (new Model_Factory('model_custom_action'))

            ->all_undeleted_sorted_as_array("model_name='$model_key'");

        // Get Model Configuration
        $data['model_configuration'] = (new Model_Configuration())

            ->model_for($model_key);

        if ( $this->firebug ) \FB::info("Dynamic Console: setting list of data");

        // Pass along any edited model Id
        if ( isset( $_GET['edited']))

            $data['edited_model_id'] = 2;


        // Get the Model Name
        $model_name = $model_key;

        if ( $this->firebug) \FB::info("Dynamic Console: Model name is $model_name");

        // Configure columns for this Model
        $this->configure_columns( $model_name );

        // Get the Label
        $label = $this->get_service_label( $model_name);

        // Get the Model Class
        $class = (string) new \Code_Alchemy\Models\Helpers\Model_Class_For($model_name);

        // Get the Fields Fetcher
        $is_dynamic_model = (new Model_Class_Verifier($class))->is_dynamic_model();

        $fetcher = $is_dynamic_model ?

            new Fields_Fetcher( new $class($model_name) ):

            new model_fields_fetcher(new $class );

        /* Get a Specific Model
        $model = new $class;
*/
        // Get the Model object
        $xo_model = new Factory_Wrapper(

            $is_dynamic_model ?

                (new Dynamic_Model($model_name))->get_factory() :

                    $class::factory()

            , $this->firebug );

        // get reference col
        $reference_column = (string) new Reference_Column_For($model_name);

        // Collate all results
        return array_merge( $data,array(

            'label'=> $label,
            'model_class'=>$model_name,
            'all_columns'=> $this->configuration[$model_name]['columns']['all'],
            'shown_columns'=> $this->configuration[$model_name]['columns']['shown'],
            'models'=> $this->get_models( $model_name),
            'fields'=> $fetcher->as_array(),
            'reference_column'=>$reference_column,
            'is_sortable'=>$fetcher->is_sortable(),
            'language'=>$this->language(),
            'last_page'=> $this->calculate_last_page_for( $class, $model_name ),
            'supports_soft_delete'=> $xo_model->model()->supports_soft_delete(),
            'tooltip_titles'=>$this->tooltip_titles( $xo_model->model() )

        ));


    }

    /**
     * @return string language of app
     */
    public function language(){ return (string) Code_Alchemy_Framework::instance()->configuration()->language; }

    /**
     * @param \xo_model $model
     * @return array of Tooltip titles
     */
    public function tooltip_titles( Model_Factory $model ){

        $lang = (string) Code_Alchemy_Framework::instance()->configuration()->language;

        return $lang =='es'? array('edit'=>'editar registro','delete'=>'archivar registro'):
            array('edit'=>'edit record','delete'=>'archive record');

    }

    /**
     * @param $class
     * @return float
     */
    private function calculate_last_page_for( $class, $model_name ){

        if ( $this->firebug ) \FB::info("Dynamic Console: Calculating last page for $class");

        $model = new Factory_Wrapper(

            (new Model_Class_Verifier($class))->is_dynamic_model()?

                (new Dynamic_Model($model_name))->get_factory():

                    $class::factory()

        );

        $total = $model->model()->count_all_undeleted();

        $divisor = $this->uri()->part(5)?$this->uri()->part(5):25;

        return ceil($total / $divisor);
    }

    /**
     * @param string $model_name
     * @return string Service Label for given Model Name
     */
    private function get_service_label( $model_name ){

        $pl = new plural_for(ucfirst(implode(' ',explode('_',$model_name))));

        $label = $pl->word;

        if ( isset( $this->configuration[$model_name]['service_label']))

            $label = $this->configuration[$model_name]['service_label'];

        return $label;

    }

    /**
     * @param $model_name
     * @return array of Models
     */
    private function get_models( $model_name ){

        // Set limit to fetch
        $limit = $this->uri()->part(5)?(int)$this->uri()->part(5):10;

        // By default no offset
        $offset = 0;

        $page = (int) $this->uri()->part(4);

        if ( $page >1 ){

            $offset = ($page-1)*$limit;

        }

        $class = (string) new \Code_Alchemy\Models\Helpers\Model_Class_For($model_name);

        $model = $this->get_model(

            (new Model_Class_Verifier($class))->is_dynamic_model() ?

                (new Dynamic_Model($model_name))->get_factory():

                    $class::factory()

        );


        // set sortable query
        $model_columns = (new Columns_For($model_name))->as_array();

        $sortable_query = in_array('sortable_id', $model_columns)? 'order by sortable_id ASC,':'';

        $term = '';

        $post_query_search = false;

        if ( isset( $_REQUEST['search_column'])){

            if ( in_array($_REQUEST['search_column'],$model_columns))

                $term= ",".$_REQUEST['search_column']." LIKE %".$_REQUEST['search_term']."%";

            else

                $post_query_search = true;

        }

        $offset_and_limit = $post_query_search ? "": "OFFSET $offset.LIMIT $limit$term";

        $all_undeleted_as_array = $model->fetch_all_undeleted_as_array("$sortable_query" . $offset_and_limit);

        if ( $post_query_search){

            $search_term = $_REQUEST['search_term'];

            $results = array();

            foreach( $all_undeleted_as_array as $model_array )

                if ( preg_match("/^$search_term$/",$model_array[$_REQUEST['search_column']]))

                    $results[] = $model_array;

            $all_undeleted_as_array = $results;

        }

        return $all_undeleted_as_array;

    }

    /**
     * Configure columns for a given model
     * @param string $model_name to configure
     */
    private function configure_columns( $model_name ){

        $all_columns = $this->all_columns_for($model_name);


        // First make sure we have the config
        if ( ! isset( $this->configuration[ $model_name ]))

            $this->configuration[ $model_name ] = array();

        // Now make sure we have structures
        if ( ! isset( $this->configuration[ $model_name]['columns'] )) {


            $this->configuration[$model_name]['columns'] = array(

                'all'=> $all_columns,

                'shown'=> array_slice( $all_columns,0,4)

            );

        } else

            $this->configuration[$model_name]['columns']['all'] = $all_columns;

        $this->save_configuration();

    }

    /**
     * @param string $model_name
     * @return array of all display columns
     */
    private function all_columns_for( $model_name ){

        $model_class = (string) new \Code_Alchemy\Models\Helpers\Model_Class_For($model_name);

        if ( ! $model_class )

            throw new \Exception("Web Director: $model_name: Unknown Class or Model, make sure Model is deployed");

        $model = new Factory_Wrapper(

            (new Model_Class_Verifier($model_class))->is_dynamic_model()?

                (new Dynamic_Model($model_name))->get_factory():

                    $model_class::factory()

        );

        $deleted_clause = $model->model()->supports_soft_delete() ? "is_deleted='0'":'';

        $object = $model->model()->find_first($deleted_clause);

        return array_keys( $object->as_array() );
    }

    /**
     * Hide a field from the Interface, when adding or editing
     */
    public function hide_field(){

        $this->load_configuration();

        $model = $_POST['model'];

        $field_name = $_POST['field'];

        $type = $_POST['type'];

        $lookup_key = $type.'_hidden_fields';

        // If not set
        if ( ! isset( $this->configuration[$model]))

            $this->configuration[ $model ] = array(
                $lookup_key =>array(
                    $field_name
                )
            );

        else {

            // create if necessary
            if ( ! isset( $this->configuration[$model][$lookup_key]))

                $this->configuration[$model][$lookup_key] = array();

            if ( ! in_array($field_name,$this->configuration[$model][$lookup_key]))

                $this->configuration[ $model ][$lookup_key][] = $field_name;
        }

        // Save changes
        $result = $this->save_configuration();

        header('Content-Type: application/json');

        echo json_encode( array(

            'model'=>$model,

            'field'=>$field_name,

            'result'=>$result?'success':'error'

        ));

    }

    /**
     * @return bool true if saved
     */
    private function save_configuration(){

        return (new Model('parnassus_configuration'))->find("name='admin-console'")->update(array(
            'data'=>serialize( $this->configuration )
        ))->put();

    }

    public function hide_service(){

        $this->load_configuration();

        $service = $_REQUEST['service'];

        if ( ! isset($this->configuration['hidden_services']))

            $this->configuration['hidden_services'] = array(
                $service
            );

        else {

            $hidden_services = $this->configuration['hidden_services'];

            if ( ! in_array($service,$hidden_services))

                $this->configuration['hidden_services'][] = $service;

            else

            {
                $key = array_search($service,$this->configuration['hidden_services']);

                unset( $this->configuration['hidden_services'][$key]);
            }

        }


        $result = $this->save_configuration();

        header('Content-Type: application/json');

        echo json_encode(array(
            'result'=>$result?'success':'error'
        ));


    }

    /**
     * Log out of system
     */
    public function logout(){

        $mgr = new Officer();

        $mgr->logout();

        header('Location: /');
    }

    /**
     * Reset a user's password
     */
    public function reset_password(){

        $email = $_REQUEST['email'];


        $user_class = (string) new \Code_Alchemy\Models\Helpers\Model_Class_For('user');

        $user = new $user_class("email='$email'");

        $user->token = (string) new Random_Password(50);

        $result = $user->save();

        $error = $user->save_error;

        $config = parnassus::instance()->configuration();

        $defaults = array(
            'from'=>(string)$config->site->default_from_email,
            'name'=>(string)$config->site->default_from_name,
            'cc'=>(string)$config->site->default_copy_to_email,

        );

        $messenger = new messenger('forgot-password',$user->as_array(),'template_key');

        $messenger->send_to($user->email,$defaults['from'],$defaults['name'],$defaults['cc']);

        header('Content-Type: application/json');

        echo json_encode(array(
            'result'=> $result?'success':'error',
            'error'=>$error,
            'send_error'=>$messenger->error
        ));

    }

    /**
     * Fetch a specific field, specified in the URL
     */
    public function fetch_field(){

        $model = $this->uri()->part(3);

        $model_class = (string) new \Code_Alchemy\Models\Helpers\Model_Class_For( $model );

        $field_name = $this->uri()->part(4);

        $fetcher = new model_fields_fetcher( new $model_class );

        header('Content-Type: application/json');

        echo json_encode( $fetcher->get( $field_name ));

    }

    /**
     * Get all of the foreign values for a table
     */
    public function foreign_values_for(){

        $values = array();

        $modelname = $this->uri()->part(3);

        $reference_col = (new Model($modelname))->reference_column();

        $is_safe_delete = !! (new Model_Configuration())->model_for($modelname)['safe_delete'];

        $method = $is_safe_delete ? 'find_all_undeleted':"find_all";

        foreach ( (new Model_Factory($modelname))->$method($_POST['conditions']) as $record){

            $ref_val = $record->$reference_col()?$record->$reference_col():$record->$reference_col;

            $values[ $record->id() ] = $ref_val;
        }

        header('Content-Type: application/json');

        echo json_encode($values);

    }

    /**
     * Set the service label for a managed service
     */
    public function set_service_label_for(){

        $this->load_configuration();

        $service_name = $this->uri()->part(3);

        $label = $_POST['label'];

        if ( ! isset( $this->configuration[$service_name]))

            $this->configuration[$service_name] = array(

            );

        $this->configuration[$service_name]['service_label'] = $label;

        $this->save_configuration();

        header('Content-Type: application/json');

        echo json_encode(array('service_label'=>$label));


    }

    /**
     * Set visible /shown columns for a service
     */
    public function set_columns_for(){

        $this->load_configuration();

        $service_name = $model_name = $this->uri()->part(3);

        $columns = explode(',',$_POST['columns']);

        // Now make sure we have structures
        if ( ! isset( $this->configuration[ $model_name]['columns'] )) {

            $all_columns = $this->all_columns_for($model_name);

            $this->configuration[$model_name]['columns'] = array(

                'all'=> $all_columns,

                'shown'=> array_slice( $all_columns,0,4)

            );

        }

        $this->configuration[$service_name]['columns']['shown'] = $columns;

        $result = $this->save_configuration();

        header('Content-Type: application/json');

        echo json_encode(array(
            'result'=>$result?'success':'error',
            'error'=>''
        ));

    }


    /**
     * Test an email template
     */
    public function test_email_template(){

        $from_email = (new Configuration_File())->default_from_email() ;

        // no data
        $data = array();

        $key = $_REQUEST['template'];

        $email = $_REQUEST['email'];

        $msgr = new Email_Messenger($key,$data,false);

        $result = $msgr->send_to($email,$from_email,'Code_Alchemy Dynamic Console');

        header('Content-Type: application/json');

        echo json_encode(array(
            'template'=>$key,
            'email'=>$email,
            'result'=>$result?'success':'error',
            'error'=>$msgr->error
        ));

    }


    /**
     * Add a new Service by name and Type
     */
    public function new_service(){

        $name = implode('_',explode(' ',strtolower($_REQUEST['name'])));

        $type = $_REQUEST['type'];

        $installer = new installer(array());

        $result = $installer->create_database_table($name,$type."_table");

        header('Content-Type: application/json');

        echo json_encode(array(
            'result'=>$result?'success':'error'
        ));
    }

    /**
     * Reorder objects
     */
    public function reorder(){

        $model_name = $this->uri()->part(3);

        $class = (string) new \Code_Alchemy\Models\Helpers\Model_Class_For($model_name);

        $order = explode(',',$_REQUEST['order']);

        $orden = 1;

        foreach( $order as $object_id ){


            $is_dynamic_model = (new Model_Class_Verifier($class))->is_dynamic_model();

            $object = $is_dynamic_model ?

                (new Dynamic_Model($model_name))->find((new Key_Column($model_name))."='$object_id'") :

                new $class((new Key_Column($model_name))."='$object_id'");

            if ( $is_dynamic_model )

                $object->set('sortable_id',$orden)->put();

            else {

                $object->sortable_id = $orden;

                $object->save();


            }
            $orden++;

        }

        echo json_encode(array('result'=>'success'));

    }

    /**
     * Bloodhound adaptor
     */
    public function bloodhound(){

        header('Content-Type: application/json');

        $model_name = $this->uri()->part(3);

        $query = $_REQUEST['q'];

        echo json_encode((new Bloodhound_Search($model_name,$query))->as_array());

    }

    /**
     * Remove a website image
     */
    public function remove_website_image(){

        $model = (new Model($_REQUEST['model']))

            ->find((new Key_Column($model_name))."='" . $_REQUEST['id'] . "'");

        new Displayed_JSON_Output(array(

            'result' => $model->exists && $model->update(array(

                    'website_image_id'=>0

                ))->put()? 'success':'error'
        ));

    }

    public function __call( $what, $how ){

        switch ( $what ){

            // Fetch Business Processes
            case 'business-processes':

                // Add Business process table if doesn't exist
                if ( ! (new Database_Table('_ca_business_process'))

                    ->exists

                )

                    (new Database_Table_Creator('_ca_business_process','business_process'))

                        ->create(false);

                new Displayed_JSON_Output( (new Model_Factory('business_process'))

                    ->all_undeleted_sorted_as_array()

                );

                break;

            // Fetch the Model Hierarchy
            case 'model-hierarchy':

                $this->load_configuration();

                new Displayed_JSON_Output( new Model_Hierarchy( $this->configuration ) );

                break;

            default:

                $this->layout = $this->get_layout();

                $this->data = $this->get_data();

                $this->render('home');

                break;
        }
    }
}
?>
